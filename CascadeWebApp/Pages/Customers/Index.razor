@page "/customers"
@using MudBlazor
@inject CascadeWebApp.Services.CustomerService CustomerService
@inject IDialogService DialogService

<MudPaper Class="pa-4 mud-theme-dark">
    <MudText Typo="Typo.h5">Customer List</MudText>
    <MudTextField @bind-Value="_search" Placeholder="Searchâ€¦" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" />
    <MudTable T="CascadeWebApp.Models.Customer" Items="_filteredCustomers" Hover="true" Dense="true" OnRowClick="@OpenCustomerModal">
        <HeaderContent>
            <MudTh>Studio</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Phone #</MudTh>
            <MudTh>Discount Level</MudTh>
            <MudTh>Payment Terms</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Studio</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.Phone</MudTd>
            <MudTd>@context.DiscountLevel</MudTd>
            <MudTd>@context.PaymentTerms</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private string _search = "";
    private List<CascadeWebApp.Models.Customer> _customers = new();
    private IEnumerable<CascadeWebApp.Models.Customer> _filteredCustomers => string.IsNullOrWhiteSpace(_search)
        ? _customers
        : _customers.Where(c => c.Studio.Contains(_search, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        _customers = await CustomerService.GetCustomersAsync();
    }

    private async Task OpenCustomerModal(TableRowClickEventArgs<CascadeWebApp.Models.Customer> e)
    {
        var parameters = new DialogParameters { ["Customer"] = e.Item };
        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        
        var dialog = await DialogService.ShowAsync<CascadeWebApp.Components.CustomerDialog>("Customer Details", parameters, options);
        await dialog.Result;
    }
}