@page "/items"
@using MudBlazor
@inject CascadeWebApp.Services.ItemService ItemService
@inject IDialogService DialogService

<MudPaper Class="pa-4 mud-theme-dark">
    <MudText Typo="Typo.h5">Item List</MudText>
    <MudTextField @bind-Value="_search" Placeholder="Searchâ€¦" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" />
    <!-- Filters can go here -->
    <MudTable T="CascadeWebApp.Models.Item" Items="_filteredItems" Hover="true" Dense="true" OnRowClick="@OpenItemModal">
        <HeaderContent>
            <MudTh>Item #</MudTh>
            <MudTh>Thread</MudTh>
            <MudTh>Gauge</MudTh>
            <MudTh>End Type</MudTh>
            <MudTh>End MM</MudTh>
            <MudTh>End Inch</MudTh>
            <MudTh>Length</MudTh>
            <MudTh>On Order</MudTh>
            <MudTh>In Production</MudTh>
            <MudTh>On the Wall</MudTh>
            <MudTh>In the Shop</MudTh>
            <MudTh>Available</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Item #">@context.ItemNumber</MudTd>
            <MudTd DataLabel="Thread">@context.Thread</MudTd>
            <MudTd DataLabel="Gauge">@context.Gauge</MudTd>
            <MudTd DataLabel="End Type">@context.EndType</MudTd>
            <MudTd DataLabel="End MM">@context.EndMM</MudTd>
            <MudTd DataLabel="End Inch">@context.EndInch</MudTd>
            <MudTd DataLabel="Length">@context.Length</MudTd>
            <MudTd DataLabel="On Order">@context.OnOrder</MudTd>
            <MudTd DataLabel="In Production">@context.InProduction</MudTd>
            <MudTd DataLabel="On the Wall">@context.OnTheWall</MudTd>
            <MudTd DataLabel="In the Shop">@context.InTheShop</MudTd>
            <MudTd DataLabel="Available">@context.Available</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private string _search = "";
    private List<CascadeWebApp.Models.Item> _items = new();
    private IEnumerable<CascadeWebApp.Models.Item> _filteredItems => string.IsNullOrWhiteSpace(_search)
        ? _items
        : _items.Where(i => i.ItemNumber.Contains(_search, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        _items = await ItemService.GetItemsAsync();
    }

    private async Task OpenItemModal(TableRowClickEventArgs<CascadeWebApp.Models.Item> e)
    {
        var parameters = new DialogParameters { ["Item"] = e.Item };
        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        
        var dialog = await DialogService.ShowAsync<CascadeWebApp.Components.ItemDialog>("Item Details", parameters, options);
        await dialog.Result;
    }
}
