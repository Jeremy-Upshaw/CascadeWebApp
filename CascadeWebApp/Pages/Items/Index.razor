@page "/items"
@using MudBlazor
@inject CascadeWebApp.Services.ItemService ItemService

<MudPaper Class="pa-4 mud-theme-dark">
    <MudText Typo="Typo.h5">Item List</MudText>
    <MudTextField @bind-Value="_search" Placeholder="Searchâ€¦" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" />
    <!-- Filters can go here -->
    <MudTable T="CascadeWebApp.Models.Item" Items="_filteredItems" Hover="true" Dense="true" OnRowClick="@OpenItemModal">
        <HeaderContent>
            <MudTh>Item #</MudTh>
            <MudTh>Thread</MudTh>
            <MudTh>Gauge</MudTh>
            <MudTh>End Type</MudTh>
            <MudTh>End MM</MudTh>
            <MudTh>End Inch</MudTh>
            <MudTh>Length</MudTh>
            <MudTh>On Order</MudTh>
            <MudTh>In Production</MudTh>
            <MudTh>On the Wall</MudTh>
            <MudTh>In the Shop</MudTh>
            <MudTh>Available</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Item #">@context.ItemNumber</MudTd>
            <MudTd DataLabel="Thread">@context.Thread</MudTd>
            <MudTd DataLabel="Gauge">@context.Gauge</MudTd>
            <MudTd DataLabel="End Type">@context.EndType</MudTd>
            <MudTd DataLabel="End MM">@context.EndMM</MudTd>
            <MudTd DataLabel="End Inch">@context.EndInch</MudTd>
            <MudTd DataLabel="Length">@context.Length</MudTd>
            <MudTd DataLabel="On Order">@context.OnOrder</MudTd>
            <MudTd DataLabel="In Production">@context.InProduction</MudTd>
            <MudTd DataLabel="On the Wall">@context.OnTheWall</MudTd>
            <MudTd DataLabel="In the Shop">@context.InTheShop</MudTd>
            <MudTd DataLabel="Available">@context.Available</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@if (_showModal && _selectedItem != null)
{
    <MudOverlay @onclick="CloseModal" />
    <MudPaper Class="fixed inset-0 z-50 flex items-center justify-center p-4" Style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 1300; background-color: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center;">
        <MudPaper Class="p-6 max-w-md w-full" Style="max-width: 600px; width: 100%; max-height: 90vh; overflow-y: auto;">
            <MudText Typo="Typo.h6" Class="mb-4">Item Details - @_selectedItem.ItemNumber</MudText>
            <div>
                <MudText Typo="Typo.subtitle2">Thread: @_selectedItem.Thread</MudText>
                <MudText Typo="Typo.subtitle2">Gauge: @_selectedItem.Gauge</MudText>
                <MudText Typo="Typo.subtitle2">End Type: @_selectedItem.EndType</MudText>
                <MudText Typo="Typo.subtitle2">End MM: @_selectedItem.EndMM</MudText>
                <MudText Typo="Typo.subtitle2">End Inch: @_selectedItem.EndInch</MudText>
                <MudText Typo="Typo.subtitle2">Length: @_selectedItem.Length</MudText>
                <MudText Typo="Typo.subtitle2">On Order: @_selectedItem.OnOrder</MudText>
                <MudText Typo="Typo.subtitle2">In Production: @_selectedItem.InProduction</MudText>
                <MudText Typo="Typo.subtitle2">On the Wall: @_selectedItem.OnTheWall</MudText>
                <MudText Typo="Typo.subtitle2">In the Shop: @_selectedItem.InTheShop</MudText>
                <MudText Typo="Typo.subtitle2">Available: @_selectedItem.Available</MudText>
                <MudText Typo="Typo.subtitle2">Machining Length: @_selectedItem.MachiningLength</MudText>
                <MudText Typo="Typo.subtitle2">Cycle Time: @_selectedItem.CycleTime</MudText>
                <MudText Typo="Typo.subtitle2">Stock Qty: @_selectedItem.StockQty</MudText>
                <MudText Typo="Typo.subtitle2">Build Qty: @_selectedItem.BuildQty</MudText>
                <MudText Typo="Typo.subtitle2">Min Stock Size: @_selectedItem.MinStockSize</MudText>
                <!-- Item Lines Table Placeholder -->
                <MudTable T="object" Dense="true">
                    <HeaderContent>
                        <MudTh>Batch #</MudTh>
                        <MudTh>Date Finished</MudTh>
                        <MudTh>Assign 1</MudTh>
                        <MudTh>Qty 1</MudTh>
                        <MudTh>Assign (Action)</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>SampleBatch</MudTd>
                        <MudTd>2025-08-17</MudTd>
                        <MudTd>Assignee</MudTd>
                        <MudTd>10</MudTd>
                        <MudTd>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="true">Assign</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </div>
            <div class="mt-4 flex justify-end">
                <MudButton OnClick="@CloseModal" Color="Color.Primary">Close</MudButton>
            </div>
        </MudPaper>
    </MudPaper>
}

@code {
    private string _search = "";
    private List<CascadeWebApp.Models.Item> _items = new();
    private IEnumerable<CascadeWebApp.Models.Item> _filteredItems => string.IsNullOrWhiteSpace(_search)
        ? _items
        : _items.Where(i => i.ItemNumber.Contains(_search, StringComparison.OrdinalIgnoreCase));
    private CascadeWebApp.Models.Item? _selectedItem;
    private bool _showModal = false;

    protected override async Task OnInitializedAsync()
    {
        _items = await ItemService.GetItemsAsync();
    }

    private void OpenItemModal(TableRowClickEventArgs<CascadeWebApp.Models.Item> e)
    {
        _selectedItem = e.Item;
        _showModal = true;
    }

    private void CloseModal()
    {
        _showModal = false;
        _selectedItem = null;
    }
}
