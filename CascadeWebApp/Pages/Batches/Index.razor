@page "/batches"
@using MudBlazor
@inject CascadeWebApp.Services.BatchService BatchService
@inject IDialogService DialogService

<MudPaper Class="pa-4 mud-theme-dark">
    <MudText Typo="Typo.h5">Batch List</MudText>
    <MudTextField @bind-Value="_search" Placeholder="Searchâ€¦" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" />
    <MudTable T="CascadeWebApp.Models.Batch" Items="_filteredBatches" Hover="true" Dense="true" OnRowClick="@OpenBatchModal">
        <HeaderContent>
            <MudTh>Batch #</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Parts Count</MudTh>
            <MudTh>Plugged Weight</MudTh>
            <MudTh>Est Finish Date</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.BatchNumber</MudTd>
            <MudTd>@context.Status</MudTd>
            <MudTd>@context.PartsCount</MudTd>
            <MudTd>@context.PluggedWeight</MudTd>
            <MudTd>@context.EstFinishDate.ToShortDateString()</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private string _search = "";
    private List<CascadeWebApp.Models.Batch> _batches = new();
    private IEnumerable<CascadeWebApp.Models.Batch> _filteredBatches => string.IsNullOrWhiteSpace(_search)
        ? _batches
        : _batches.Where(b => b.BatchNumber.Contains(_search, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        _batches = await BatchService.GetBatchesAsync();
    }

    private async Task OpenBatchModal(TableRowClickEventArgs<CascadeWebApp.Models.Batch> e)
    {
        var parameters = new DialogParameters { ["Batch"] = e.Item };
        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        
        var dialog = await DialogService.ShowAsync<CascadeWebApp.Components.BatchDialog>("Batch Details", parameters, options);
        await dialog.Result;
    }
}